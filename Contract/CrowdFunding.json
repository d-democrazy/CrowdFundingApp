{
    "language": "Solidity",
    "sources": {
        "src/CrowdFunding.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ncontract CrowdFunding {\n    struct Campaign {\n        address owner;\n        string title;\n        string description;\n        uint256 target;\n        uint256 deadline;\n        uint256 amountCollected;\n        string image;\n        address[] donators;\n        uint256[] donations;\n    }\n\n    mapping(uint256 => Campaign) public campaigns;\n\n    uint256 public numberOfCampaigns = 0;\n\n    function createCampaign(\n        address _owner,\n        string memory _title,\n        string memory _description,\n        uint256 _target,\n        uint256 _deadline,\n        string memory _image\n    ) public returns (uint256) {\n        Campaign storage campaign = campaigns[numberOfCampaigns];\n\n        require(campaign.deadline < block.timestamp, \"The deadline should be a date in the future\");\n\n        campaign.owner = _owner;\n        campaign.title = _title;\n        campaign.description = _description;\n        campaign.target = _target;\n        campaign.deadline = _deadline;\n        campaign.amountCollected = 0;\n        campaign.image = _image;\n\n        numberOfCampaigns++;\n\n        return numberOfCampaigns - 1;\n    }\n\n    function donateToCampaign(uint256 _id) public payable {\n        uint256 amount = msg.value;\n\n        Campaign storage campaign = campaigns[_id];\n\n        campaign.donators.push(msg.sender);\n        campaign.donations.push(amount);\n\n        (bool sent,) = payable(campaign.owner).call{value: amount}(\"\");\n\n        if (sent) {\n            campaign.amountCollected = campaign.amountCollected + amount;\n        }\n    }\n\n    function getDonators(uint256 _id) public view returns (address[] memory, uint256[] memory) {\n        return (campaigns[_id].donators, campaigns[_id].donations);\n    }\n\n    function getCampaigns() public view returns (Campaign[] memory) {\n        Campaign[] memory allCampaigns = new Campaign[](numberOfCampaigns);\n\n        for (uint256 i = 0; i < numberOfCampaigns; i++) {\n            Campaign storage item = campaigns[i];\n\n            allCampaigns[i] = item;\n        }\n\n        return allCampaigns;\n    }\n}\n"
        }
    },
    "settings": {
        "remappings": [
            "forge-std/=lib/forge-std/src/"
        ],
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode.object",
                    "evm.bytecode.sourceMap",
                    "evm.bytecode.linkReferences",
                    "evm.deployedBytecode.object",
                    "evm.deployedBytecode.sourceMap",
                    "evm.deployedBytecode.linkReferences",
                    "evm.deployedBytecode.immutableReferences",
                    "evm.methodIdentifiers",
                    "metadata"
                ]
            }
        },
        "evmVersion": "paris",
        "viaIR": false,
        "libraries": {}
    }
}